// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file main.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Empty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(a: Empty | PlainMessage<Empty> | undefined, b: Empty | PlainMessage<Empty> | undefined): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message TestRPCRequest
 */
export class TestRPCRequest extends Message<TestRPCRequest> {
  /**
   * @generated from field: string testField = 1;
   */
  testField = "";

  constructor(data?: PartialMessage<TestRPCRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TestRPCRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testField", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRPCRequest {
    return new TestRPCRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRPCRequest {
    return new TestRPCRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRPCRequest {
    return new TestRPCRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestRPCRequest | PlainMessage<TestRPCRequest> | undefined, b: TestRPCRequest | PlainMessage<TestRPCRequest> | undefined): boolean {
    return proto3.util.equals(TestRPCRequest, a, b);
  }
}

/**
 * @generated from message TestRPCResponse
 */
export class TestRPCResponse extends Message<TestRPCResponse> {
  /**
   * @generated from field: string testField = 1;
   */
  testField = "";

  constructor(data?: PartialMessage<TestRPCResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TestRPCResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "testField", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestRPCResponse {
    return new TestRPCResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestRPCResponse {
    return new TestRPCResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestRPCResponse {
    return new TestRPCResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestRPCResponse | PlainMessage<TestRPCResponse> | undefined, b: TestRPCResponse | PlainMessage<TestRPCResponse> | undefined): boolean {
    return proto3.util.equals(TestRPCResponse, a, b);
  }
}

