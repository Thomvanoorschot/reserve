// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file tenant.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message RegisterTenantRequest
 */
export class RegisterTenantRequest extends Message<RegisterTenantRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string location = 2;
   */
  location = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string password = 4;
   */
  password = "";

  constructor(data?: PartialMessage<RegisterTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "RegisterTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "location", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTenantRequest {
    return new RegisterTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTenantRequest {
    return new RegisterTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTenantRequest {
    return new RegisterTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTenantRequest | PlainMessage<RegisterTenantRequest> | undefined, b: RegisterTenantRequest | PlainMessage<RegisterTenantRequest> | undefined): boolean {
    return proto3.util.equals(RegisterTenantRequest, a, b);
  }
}

/**
 * @generated from message RegisterTenantResponse
 */
export class RegisterTenantResponse extends Message<RegisterTenantResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = "";

  /**
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<RegisterTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "RegisterTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterTenantResponse {
    return new RegisterTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterTenantResponse {
    return new RegisterTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterTenantResponse {
    return new RegisterTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterTenantResponse | PlainMessage<RegisterTenantResponse> | undefined, b: RegisterTenantResponse | PlainMessage<RegisterTenantResponse> | undefined): boolean {
    return proto3.util.equals(RegisterTenantResponse, a, b);
  }
}

