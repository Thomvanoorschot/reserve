// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file location.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AvailabilityRange } from "./availability_pb.js";

/**
 * @generated from message GetLocationByIDRequest
 */
export class GetLocationByIDRequest extends Message<GetLocationByIDRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetLocationByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetLocationByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationByIDRequest {
    return new GetLocationByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationByIDRequest {
    return new GetLocationByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationByIDRequest {
    return new GetLocationByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLocationByIDRequest | PlainMessage<GetLocationByIDRequest> | undefined, b: GetLocationByIDRequest | PlainMessage<GetLocationByIDRequest> | undefined): boolean {
    return proto3.util.equals(GetLocationByIDRequest, a, b);
  }
}

/**
 * @generated from message GetLocationsRequest
 */
export class GetLocationsRequest extends Message<GetLocationsRequest> {
  constructor(data?: PartialMessage<GetLocationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetLocationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationsRequest {
    return new GetLocationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationsRequest {
    return new GetLocationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationsRequest {
    return new GetLocationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLocationsRequest | PlainMessage<GetLocationsRequest> | undefined, b: GetLocationsRequest | PlainMessage<GetLocationsRequest> | undefined): boolean {
    return proto3.util.equals(GetLocationsRequest, a, b);
  }
}

/**
 * @generated from message GetLocationsResponse
 */
export class GetLocationsResponse extends Message<GetLocationsResponse> {
  /**
   * @generated from field: repeated LocationResponse locations = 1;
   */
  locations: LocationResponse[] = [];

  constructor(data?: PartialMessage<GetLocationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetLocationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locations", kind: "message", T: LocationResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLocationsResponse {
    return new GetLocationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLocationsResponse {
    return new GetLocationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLocationsResponse {
    return new GetLocationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLocationsResponse | PlainMessage<GetLocationsResponse> | undefined, b: GetLocationsResponse | PlainMessage<GetLocationsResponse> | undefined): boolean {
    return proto3.util.equals(GetLocationsResponse, a, b);
  }
}

/**
 * @generated from message LocationResponse
 */
export class LocationResponse extends Message<LocationResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string tz = 3;
   */
  tz = "";

  /**
   * @generated from field: repeated AvailabilityRange DefaultMondayAvailability = 4;
   */
  DefaultMondayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultTuesdayAvailability = 5;
   */
  DefaultTuesdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultWednesdayAvailability = 6;
   */
  DefaultWednesdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultThursdayAvailability = 7;
   */
  DefaultThursdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultFridayAvailability = 8;
   */
  DefaultFridayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultSaturdayAvailability = 9;
   */
  DefaultSaturdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultSundayAvailability = 10;
   */
  DefaultSundayAvailability: AvailabilityRange[] = [];

  constructor(data?: PartialMessage<LocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "LocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "DefaultMondayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 5, name: "DefaultTuesdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 6, name: "DefaultWednesdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 7, name: "DefaultThursdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 8, name: "DefaultFridayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 9, name: "DefaultSaturdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 10, name: "DefaultSundayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationResponse {
    return new LocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationResponse {
    return new LocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationResponse {
    return new LocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LocationResponse | PlainMessage<LocationResponse> | undefined, b: LocationResponse | PlainMessage<LocationResponse> | undefined): boolean {
    return proto3.util.equals(LocationResponse, a, b);
  }
}

/**
 * @generated from message UpsertLocationRequest
 */
export class UpsertLocationRequest extends Message<UpsertLocationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string tz = 3;
   */
  tz = "";

  /**
   * @generated from field: repeated AvailabilityRange DefaultMondayAvailability = 4;
   */
  DefaultMondayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultTuesdayAvailability = 5;
   */
  DefaultTuesdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultWednesdayAvailability = 6;
   */
  DefaultWednesdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultThursdayAvailability = 7;
   */
  DefaultThursdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultFridayAvailability = 8;
   */
  DefaultFridayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultSaturdayAvailability = 9;
   */
  DefaultSaturdayAvailability: AvailabilityRange[] = [];

  /**
   * @generated from field: repeated AvailabilityRange DefaultSundayAvailability = 10;
   */
  DefaultSundayAvailability: AvailabilityRange[] = [];

  constructor(data?: PartialMessage<UpsertLocationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpsertLocationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "DefaultMondayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 5, name: "DefaultTuesdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 6, name: "DefaultWednesdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 7, name: "DefaultThursdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 8, name: "DefaultFridayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 9, name: "DefaultSaturdayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
    { no: 10, name: "DefaultSundayAvailability", kind: "message", T: AvailabilityRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertLocationRequest {
    return new UpsertLocationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertLocationRequest {
    return new UpsertLocationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertLocationRequest {
    return new UpsertLocationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertLocationRequest | PlainMessage<UpsertLocationRequest> | undefined, b: UpsertLocationRequest | PlainMessage<UpsertLocationRequest> | undefined): boolean {
    return proto3.util.equals(UpsertLocationRequest, a, b);
  }
}

/**
 * @generated from message UpsertLocationResponse
 */
export class UpsertLocationResponse extends Message<UpsertLocationResponse> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<UpsertLocationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpsertLocationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertLocationResponse {
    return new UpsertLocationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertLocationResponse {
    return new UpsertLocationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertLocationResponse {
    return new UpsertLocationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertLocationResponse | PlainMessage<UpsertLocationResponse> | undefined, b: UpsertLocationResponse | PlainMessage<UpsertLocationResponse> | undefined): boolean {
    return proto3.util.equals(UpsertLocationResponse, a, b);
  }
}

