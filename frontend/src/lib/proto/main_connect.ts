// @generated by protoc-gen-connect-es v1.4.0 with parameter "target=ts"
// @generated from file main.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { GetAvailableDaysRequest, GetAvailableDaysResponse, GetAvailableTimeslotsRequest, GetAvailableTimeslotsResponse, UpdateLocationDefaultAvailabilityRequest, UpdateLocationDefaultAvailabilityResponse, UpsertAvailabilityOverrideRequest, UpsertAvailabilityOverrideResponse } from "./availability_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { GetLocationByIDRequest, GetLocationsRequest, GetLocationsResponse, LocationResponse, UpsertLocationRequest, UpsertLocationResponse } from "./location_pb.js";
import { UpsertReservationRequest, UpsertReservationResponse } from "./reservation_pb.js";
import { RegisterTenantRequest, RegisterTenantResponse } from "./tenant_pb.js";
import { TestRPCRequest, TestRPCResponse } from "./main_pb.js";

/**
 * @generated from service AvailabilityService
 */
export const AvailabilityService = {
  typeName: "AvailabilityService",
  methods: {
    /**
     * @generated from rpc AvailabilityService.UpdateLocationDefaultAvailability
     */
    updateLocationDefaultAvailability: {
      name: "UpdateLocationDefaultAvailability",
      I: UpdateLocationDefaultAvailabilityRequest,
      O: UpdateLocationDefaultAvailabilityResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc AvailabilityService.GetAvailableTimeslots
     */
    getAvailableTimeslots: {
      name: "GetAvailableTimeslots",
      I: GetAvailableTimeslotsRequest,
      O: GetAvailableTimeslotsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc AvailabilityService.GetAvailableDays
     */
    getAvailableDays: {
      name: "GetAvailableDays",
      I: GetAvailableDaysRequest,
      O: GetAvailableDaysResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc AvailabilityService.UpsertAvailabilityOverride
     */
    upsertAvailabilityOverride: {
      name: "UpsertAvailabilityOverride",
      I: UpsertAvailabilityOverrideRequest,
      O: UpsertAvailabilityOverrideResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service LocationService
 */
export const LocationService = {
  typeName: "LocationService",
  methods: {
    /**
     * @generated from rpc LocationService.GetLocationByID
     */
    getLocationByID: {
      name: "GetLocationByID",
      I: GetLocationByIDRequest,
      O: LocationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc LocationService.GetLocations
     */
    getLocations: {
      name: "GetLocations",
      I: GetLocationsRequest,
      O: GetLocationsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc LocationService.UpsertLocation
     */
    upsertLocation: {
      name: "UpsertLocation",
      I: UpsertLocationRequest,
      O: UpsertLocationResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service ReservationService
 */
export const ReservationService = {
  typeName: "ReservationService",
  methods: {
    /**
     * @generated from rpc ReservationService.UpsertReservation
     */
    upsertReservation: {
      name: "UpsertReservation",
      I: UpsertReservationRequest,
      O: UpsertReservationResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

/**
 * @generated from service TenantService
 */
export const TenantService = {
  typeName: "TenantService",
  methods: {
    /**
     * @generated from rpc TenantService.RegisterTenant
     */
    registerTenant: {
      name: "RegisterTenant",
      I: RegisterTenantRequest,
      O: RegisterTenantResponse,
      kind: MethodKind.ServerStreaming,
    },
  }
} as const;

/**
 * @generated from service TestService
 */
export const TestService = {
  typeName: "TestService",
  methods: {
    /**
     * @generated from rpc TestService.TestUnaryRPC
     */
    testUnaryRPC: {
      name: "TestUnaryRPC",
      I: TestRPCRequest,
      O: TestRPCResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

