// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file availability.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message GetAvailableDaysRequest
 */
export class GetAvailableDaysRequest extends Message<GetAvailableDaysRequest> {
  /**
   * @generated from field: string locationId = 1;
   */
  locationId = "";

  /**
   * @generated from field: int64 startAtUnix = 2;
   */
  startAtUnix = protoInt64.zero;

  /**
   * @generated from field: int64 endAtUnix = 3;
   */
  endAtUnix = protoInt64.zero;

  /**
   * @generated from field: string tz = 4;
   */
  tz = "";

  constructor(data?: PartialMessage<GetAvailableDaysRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetAvailableDaysRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locationId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "startAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "endAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableDaysRequest {
    return new GetAvailableDaysRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableDaysRequest {
    return new GetAvailableDaysRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableDaysRequest {
    return new GetAvailableDaysRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableDaysRequest | PlainMessage<GetAvailableDaysRequest> | undefined, b: GetAvailableDaysRequest | PlainMessage<GetAvailableDaysRequest> | undefined): boolean {
    return proto3.util.equals(GetAvailableDaysRequest, a, b);
  }
}

/**
 * @generated from message GetAvailableDaysResponse
 */
export class GetAvailableDaysResponse extends Message<GetAvailableDaysResponse> {
  /**
   * @generated from field: repeated int64 availableDaysUnix = 1;
   */
  availableDaysUnix: bigint[] = [];

  /**
   * @generated from field: string tz = 2;
   */
  tz = "";

  constructor(data?: PartialMessage<GetAvailableDaysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetAvailableDaysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "availableDaysUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 2, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableDaysResponse {
    return new GetAvailableDaysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableDaysResponse {
    return new GetAvailableDaysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableDaysResponse {
    return new GetAvailableDaysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableDaysResponse | PlainMessage<GetAvailableDaysResponse> | undefined, b: GetAvailableDaysResponse | PlainMessage<GetAvailableDaysResponse> | undefined): boolean {
    return proto3.util.equals(GetAvailableDaysResponse, a, b);
  }
}

/**
 * @generated from message GetAvailableTimeslotsRequest
 */
export class GetAvailableTimeslotsRequest extends Message<GetAvailableTimeslotsRequest> {
  /**
   * @generated from field: string locationId = 1;
   */
  locationId = "";

  /**
   * @generated from field: int64 dayUnix = 2;
   */
  dayUnix = protoInt64.zero;

  /**
   * @generated from field: string tz = 3;
   */
  tz = "";

  constructor(data?: PartialMessage<GetAvailableTimeslotsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetAvailableTimeslotsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locationId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dayUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableTimeslotsRequest {
    return new GetAvailableTimeslotsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableTimeslotsRequest {
    return new GetAvailableTimeslotsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableTimeslotsRequest {
    return new GetAvailableTimeslotsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableTimeslotsRequest | PlainMessage<GetAvailableTimeslotsRequest> | undefined, b: GetAvailableTimeslotsRequest | PlainMessage<GetAvailableTimeslotsRequest> | undefined): boolean {
    return proto3.util.equals(GetAvailableTimeslotsRequest, a, b);
  }
}

/**
 * @generated from message GetAvailableTimeslotsResponse
 */
export class GetAvailableTimeslotsResponse extends Message<GetAvailableTimeslotsResponse> {
  /**
   * @generated from field: repeated int64 startTimesUnix = 1;
   */
  startTimesUnix: bigint[] = [];

  /**
   * @generated from field: string tz = 2;
   */
  tz = "";

  constructor(data?: PartialMessage<GetAvailableTimeslotsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "GetAvailableTimeslotsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startTimesUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 2, name: "tz", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAvailableTimeslotsResponse {
    return new GetAvailableTimeslotsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAvailableTimeslotsResponse {
    return new GetAvailableTimeslotsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAvailableTimeslotsResponse {
    return new GetAvailableTimeslotsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAvailableTimeslotsResponse | PlainMessage<GetAvailableTimeslotsResponse> | undefined, b: GetAvailableTimeslotsResponse | PlainMessage<GetAvailableTimeslotsResponse> | undefined): boolean {
    return proto3.util.equals(GetAvailableTimeslotsResponse, a, b);
  }
}

/**
 * @generated from message AvailabilityRange
 */
export class AvailabilityRange extends Message<AvailabilityRange> {
  /**
   * @generated from field: int64 startAtUnix = 1;
   */
  startAtUnix = protoInt64.zero;

  /**
   * @generated from field: int64 endAtUnix = 2;
   */
  endAtUnix = protoInt64.zero;

  constructor(data?: PartialMessage<AvailabilityRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "AvailabilityRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "endAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailabilityRange {
    return new AvailabilityRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailabilityRange {
    return new AvailabilityRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailabilityRange {
    return new AvailabilityRange().fromJsonString(jsonString, options);
  }

  static equals(a: AvailabilityRange | PlainMessage<AvailabilityRange> | undefined, b: AvailabilityRange | PlainMessage<AvailabilityRange> | undefined): boolean {
    return proto3.util.equals(AvailabilityRange, a, b);
  }
}

/**
 * @generated from message UpsertAvailabilityOverrideRequest
 */
export class UpsertAvailabilityOverrideRequest extends Message<UpsertAvailabilityOverrideRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string resourceId = 2;
   */
  resourceId = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: int64 startAtUnix = 5;
   */
  startAtUnix = protoInt64.zero;

  /**
   * @generated from field: int64 endAtUnix = 6;
   */
  endAtUnix = protoInt64.zero;

  /**
   * @generated from field: string availabilityId = 7;
   */
  availabilityId = "";

  /**
   * @generated from field: repeated AvailabilityRange availabilityRanges = 8;
   */
  availabilityRanges: AvailabilityRange[] = [];

  constructor(data?: PartialMessage<UpsertAvailabilityOverrideRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpsertAvailabilityOverrideRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resourceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "startAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "endAtUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "availabilityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "availabilityRanges", kind: "message", T: AvailabilityRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAvailabilityOverrideRequest {
    return new UpsertAvailabilityOverrideRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAvailabilityOverrideRequest {
    return new UpsertAvailabilityOverrideRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAvailabilityOverrideRequest {
    return new UpsertAvailabilityOverrideRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAvailabilityOverrideRequest | PlainMessage<UpsertAvailabilityOverrideRequest> | undefined, b: UpsertAvailabilityOverrideRequest | PlainMessage<UpsertAvailabilityOverrideRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAvailabilityOverrideRequest, a, b);
  }
}

/**
 * @generated from message UpsertAvailabilityOverrideResponse
 */
export class UpsertAvailabilityOverrideResponse extends Message<UpsertAvailabilityOverrideResponse> {
  constructor(data?: PartialMessage<UpsertAvailabilityOverrideResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpsertAvailabilityOverrideResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAvailabilityOverrideResponse {
    return new UpsertAvailabilityOverrideResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAvailabilityOverrideResponse {
    return new UpsertAvailabilityOverrideResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAvailabilityOverrideResponse {
    return new UpsertAvailabilityOverrideResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAvailabilityOverrideResponse | PlainMessage<UpsertAvailabilityOverrideResponse> | undefined, b: UpsertAvailabilityOverrideResponse | PlainMessage<UpsertAvailabilityOverrideResponse> | undefined): boolean {
    return proto3.util.equals(UpsertAvailabilityOverrideResponse, a, b);
  }
}

/**
 * @generated from message UpdateLocationDefaultAvailabilityRequest
 */
export class UpdateLocationDefaultAvailabilityRequest extends Message<UpdateLocationDefaultAvailabilityRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string availabilityId = 2;
   */
  availabilityId = "";

  /**
   * @generated from field: repeated AvailabilityRange availabilityRanges = 3;
   */
  availabilityRanges: AvailabilityRange[] = [];

  constructor(data?: PartialMessage<UpdateLocationDefaultAvailabilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpdateLocationDefaultAvailabilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "availabilityId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "availabilityRanges", kind: "message", T: AvailabilityRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLocationDefaultAvailabilityRequest {
    return new UpdateLocationDefaultAvailabilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLocationDefaultAvailabilityRequest {
    return new UpdateLocationDefaultAvailabilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLocationDefaultAvailabilityRequest {
    return new UpdateLocationDefaultAvailabilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLocationDefaultAvailabilityRequest | PlainMessage<UpdateLocationDefaultAvailabilityRequest> | undefined, b: UpdateLocationDefaultAvailabilityRequest | PlainMessage<UpdateLocationDefaultAvailabilityRequest> | undefined): boolean {
    return proto3.util.equals(UpdateLocationDefaultAvailabilityRequest, a, b);
  }
}

/**
 * @generated from message UpdateLocationDefaultAvailabilityResponse
 */
export class UpdateLocationDefaultAvailabilityResponse extends Message<UpdateLocationDefaultAvailabilityResponse> {
  constructor(data?: PartialMessage<UpdateLocationDefaultAvailabilityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "UpdateLocationDefaultAvailabilityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateLocationDefaultAvailabilityResponse {
    return new UpdateLocationDefaultAvailabilityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateLocationDefaultAvailabilityResponse {
    return new UpdateLocationDefaultAvailabilityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateLocationDefaultAvailabilityResponse {
    return new UpdateLocationDefaultAvailabilityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateLocationDefaultAvailabilityResponse | PlainMessage<UpdateLocationDefaultAvailabilityResponse> | undefined, b: UpdateLocationDefaultAvailabilityResponse | PlainMessage<UpdateLocationDefaultAvailabilityResponse> | undefined): boolean {
    return proto3.util.equals(UpdateLocationDefaultAvailabilityResponse, a, b);
  }
}

/**
 * @generated from message Test
 */
export class Test extends Message<Test> {
  /**
   * @generated from field: map<int64, TestSlice> availability = 1;
   */
  availability: { [key: string]: TestSlice } = {};

  constructor(data?: PartialMessage<Test>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Test";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "availability", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "message", T: TestSlice} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Test {
    return new Test().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJsonString(jsonString, options);
  }

  static equals(a: Test | PlainMessage<Test> | undefined, b: Test | PlainMessage<Test> | undefined): boolean {
    return proto3.util.equals(Test, a, b);
  }
}

/**
 * @generated from message TestSlice
 */
export class TestSlice extends Message<TestSlice> {
  /**
   * @generated from field: repeated int64 startTimeUnix = 1;
   */
  startTimeUnix: bigint[] = [];

  constructor(data?: PartialMessage<TestSlice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TestSlice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "startTimeUnix", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSlice {
    return new TestSlice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSlice {
    return new TestSlice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSlice {
    return new TestSlice().fromJsonString(jsonString, options);
  }

  static equals(a: TestSlice | PlainMessage<TestSlice> | undefined, b: TestSlice | PlainMessage<TestSlice> | undefined): boolean {
    return proto3.util.equals(TestSlice, a, b);
  }
}

