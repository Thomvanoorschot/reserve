// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AvailabilityServiceClient is the client API for AvailabilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvailabilityServiceClient interface {
	GetAvailableTimeslots(ctx context.Context, in *GetAvailableTimeslotsRequest, opts ...grpc.CallOption) (*GetAvailableTimeslotsResponse, error)
	GetAvailableDays(ctx context.Context, in *GetAvailableDaysRequest, opts ...grpc.CallOption) (*GetAvailableDaysResponse, error)
	UpsertAvailabilityOverride(ctx context.Context, in *UpsertAvailabilityOverrideRequest, opts ...grpc.CallOption) (*UpsertAvailabilityOverrideResponse, error)
}

type availabilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvailabilityServiceClient(cc grpc.ClientConnInterface) AvailabilityServiceClient {
	return &availabilityServiceClient{cc}
}

func (c *availabilityServiceClient) GetAvailableTimeslots(ctx context.Context, in *GetAvailableTimeslotsRequest, opts ...grpc.CallOption) (*GetAvailableTimeslotsResponse, error) {
	out := new(GetAvailableTimeslotsResponse)
	err := c.cc.Invoke(ctx, "/proto.AvailabilityService/GetAvailableTimeslots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *availabilityServiceClient) GetAvailableDays(ctx context.Context, in *GetAvailableDaysRequest, opts ...grpc.CallOption) (*GetAvailableDaysResponse, error) {
	out := new(GetAvailableDaysResponse)
	err := c.cc.Invoke(ctx, "/proto.AvailabilityService/GetAvailableDays", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *availabilityServiceClient) UpsertAvailabilityOverride(ctx context.Context, in *UpsertAvailabilityOverrideRequest, opts ...grpc.CallOption) (*UpsertAvailabilityOverrideResponse, error) {
	out := new(UpsertAvailabilityOverrideResponse)
	err := c.cc.Invoke(ctx, "/proto.AvailabilityService/UpsertAvailabilityOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvailabilityServiceServer is the server API for AvailabilityService service.
// All implementations must embed UnimplementedAvailabilityServiceServer
// for forward compatibility
type AvailabilityServiceServer interface {
	GetAvailableTimeslots(context.Context, *GetAvailableTimeslotsRequest) (*GetAvailableTimeslotsResponse, error)
	GetAvailableDays(context.Context, *GetAvailableDaysRequest) (*GetAvailableDaysResponse, error)
	UpsertAvailabilityOverride(context.Context, *UpsertAvailabilityOverrideRequest) (*UpsertAvailabilityOverrideResponse, error)
	mustEmbedUnimplementedAvailabilityServiceServer()
}

// UnimplementedAvailabilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAvailabilityServiceServer struct {
}

func (UnimplementedAvailabilityServiceServer) GetAvailableTimeslots(context.Context, *GetAvailableTimeslotsRequest) (*GetAvailableTimeslotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTimeslots not implemented")
}
func (UnimplementedAvailabilityServiceServer) GetAvailableDays(context.Context, *GetAvailableDaysRequest) (*GetAvailableDaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDays not implemented")
}
func (UnimplementedAvailabilityServiceServer) UpsertAvailabilityOverride(context.Context, *UpsertAvailabilityOverrideRequest) (*UpsertAvailabilityOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAvailabilityOverride not implemented")
}
func (UnimplementedAvailabilityServiceServer) mustEmbedUnimplementedAvailabilityServiceServer() {}

// UnsafeAvailabilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvailabilityServiceServer will
// result in compilation errors.
type UnsafeAvailabilityServiceServer interface {
	mustEmbedUnimplementedAvailabilityServiceServer()
}

func RegisterAvailabilityServiceServer(s grpc.ServiceRegistrar, srv AvailabilityServiceServer) {
	s.RegisterService(&AvailabilityService_ServiceDesc, srv)
}

func _AvailabilityService_GetAvailableTimeslots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableTimeslotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailabilityServiceServer).GetAvailableTimeslots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AvailabilityService/GetAvailableTimeslots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailabilityServiceServer).GetAvailableTimeslots(ctx, req.(*GetAvailableTimeslotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvailabilityService_GetAvailableDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableDaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailabilityServiceServer).GetAvailableDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AvailabilityService/GetAvailableDays",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailabilityServiceServer).GetAvailableDays(ctx, req.(*GetAvailableDaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvailabilityService_UpsertAvailabilityOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAvailabilityOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvailabilityServiceServer).UpsertAvailabilityOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AvailabilityService/UpsertAvailabilityOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvailabilityServiceServer).UpsertAvailabilityOverride(ctx, req.(*UpsertAvailabilityOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AvailabilityService_ServiceDesc is the grpc.ServiceDesc for AvailabilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvailabilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AvailabilityService",
	HandlerType: (*AvailabilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAvailableTimeslots",
			Handler:    _AvailabilityService_GetAvailableTimeslots_Handler,
		},
		{
			MethodName: "GetAvailableDays",
			Handler:    _AvailabilityService_GetAvailableDays_Handler,
		},
		{
			MethodName: "UpsertAvailabilityOverride",
			Handler:    _AvailabilityService_UpsertAvailabilityOverride_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	UpsertReservation(ctx context.Context, in *UpsertReservationRequest, opts ...grpc.CallOption) (*UpsertReservationResponse, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) UpsertReservation(ctx context.Context, in *UpsertReservationRequest, opts ...grpc.CallOption) (*UpsertReservationResponse, error) {
	out := new(UpsertReservationResponse)
	err := c.cc.Invoke(ctx, "/proto.ReservationService/UpsertReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations must embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	UpsertReservation(context.Context, *UpsertReservationRequest) (*UpsertReservationResponse, error)
	mustEmbedUnimplementedReservationServiceServer()
}

// UnimplementedReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) UpsertReservation(context.Context, *UpsertReservationRequest) (*UpsertReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertReservation not implemented")
}
func (UnimplementedReservationServiceServer) mustEmbedUnimplementedReservationServiceServer() {}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_UpsertReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).UpsertReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReservationService/UpsertReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).UpsertReservation(ctx, req.(*UpsertReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertReservation",
			Handler:    _ReservationService_UpsertReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}

// TenantServiceClient is the client API for TenantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantServiceClient interface {
	RegisterTenant(ctx context.Context, in *RegisterTenantRequest, opts ...grpc.CallOption) (TenantService_RegisterTenantClient, error)
}

type tenantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantServiceClient(cc grpc.ClientConnInterface) TenantServiceClient {
	return &tenantServiceClient{cc}
}

func (c *tenantServiceClient) RegisterTenant(ctx context.Context, in *RegisterTenantRequest, opts ...grpc.CallOption) (TenantService_RegisterTenantClient, error) {
	stream, err := c.cc.NewStream(ctx, &TenantService_ServiceDesc.Streams[0], "/proto.TenantService/RegisterTenant", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenantServiceRegisterTenantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TenantService_RegisterTenantClient interface {
	Recv() (*RegisterTenantResponse, error)
	grpc.ClientStream
}

type tenantServiceRegisterTenantClient struct {
	grpc.ClientStream
}

func (x *tenantServiceRegisterTenantClient) Recv() (*RegisterTenantResponse, error) {
	m := new(RegisterTenantResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TenantServiceServer is the server API for TenantService service.
// All implementations must embed UnimplementedTenantServiceServer
// for forward compatibility
type TenantServiceServer interface {
	RegisterTenant(*RegisterTenantRequest, TenantService_RegisterTenantServer) error
	mustEmbedUnimplementedTenantServiceServer()
}

// UnimplementedTenantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenantServiceServer struct {
}

func (UnimplementedTenantServiceServer) RegisterTenant(*RegisterTenantRequest, TenantService_RegisterTenantServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterTenant not implemented")
}
func (UnimplementedTenantServiceServer) mustEmbedUnimplementedTenantServiceServer() {}

// UnsafeTenantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServiceServer will
// result in compilation errors.
type UnsafeTenantServiceServer interface {
	mustEmbedUnimplementedTenantServiceServer()
}

func RegisterTenantServiceServer(s grpc.ServiceRegistrar, srv TenantServiceServer) {
	s.RegisterService(&TenantService_ServiceDesc, srv)
}

func _TenantService_RegisterTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterTenantRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TenantServiceServer).RegisterTenant(m, &tenantServiceRegisterTenantServer{stream})
}

type TenantService_RegisterTenantServer interface {
	Send(*RegisterTenantResponse) error
	grpc.ServerStream
}

type tenantServiceRegisterTenantServer struct {
	grpc.ServerStream
}

func (x *tenantServiceRegisterTenantServer) Send(m *RegisterTenantResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TenantService_ServiceDesc is the grpc.ServiceDesc for TenantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TenantService",
	HandlerType: (*TenantServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterTenant",
			Handler:       _TenantService_RegisterTenant_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "main.proto",
}

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestUnaryRPC(ctx context.Context, in *TestRPCRequest, opts ...grpc.CallOption) (*TestRPCResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestUnaryRPC(ctx context.Context, in *TestRPCRequest, opts ...grpc.CallOption) (*TestRPCResponse, error) {
	out := new(TestRPCResponse)
	err := c.cc.Invoke(ctx, "/proto.TestService/TestUnaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	TestUnaryRPC(context.Context, *TestRPCRequest) (*TestRPCResponse, error)
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) TestUnaryRPC(context.Context, *TestRPCRequest) (*TestRPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUnaryRPC not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestUnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestUnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TestService/TestUnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestUnaryRPC(ctx, req.(*TestRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestUnaryRPC",
			Handler:    _TestService_TestUnaryRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
