//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ResourceAvailabilityOverride = newResourceAvailabilityOverrideTable("", "resource_availability_override", "")

type resourceAvailabilityOverrideTable struct {
	sqlite.Table

	// Columns
	ResourceID     sqlite.ColumnString
	AvailabilityID sqlite.ColumnString
	Name           sqlite.ColumnString
	StartAt        sqlite.ColumnTimestamp
	EndAt          sqlite.ColumnTimestamp
	CreatedAt      sqlite.ColumnTimestamp
	UpdatedAt      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ResourceAvailabilityOverrideTable struct {
	resourceAvailabilityOverrideTable

	EXCLUDED resourceAvailabilityOverrideTable
}

// AS creates new ResourceAvailabilityOverrideTable with assigned alias
func (a ResourceAvailabilityOverrideTable) AS(alias string) *ResourceAvailabilityOverrideTable {
	return newResourceAvailabilityOverrideTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ResourceAvailabilityOverrideTable with assigned schema name
func (a ResourceAvailabilityOverrideTable) FromSchema(schemaName string) *ResourceAvailabilityOverrideTable {
	return newResourceAvailabilityOverrideTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ResourceAvailabilityOverrideTable with assigned table prefix
func (a ResourceAvailabilityOverrideTable) WithPrefix(prefix string) *ResourceAvailabilityOverrideTable {
	return newResourceAvailabilityOverrideTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ResourceAvailabilityOverrideTable with assigned table suffix
func (a ResourceAvailabilityOverrideTable) WithSuffix(suffix string) *ResourceAvailabilityOverrideTable {
	return newResourceAvailabilityOverrideTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newResourceAvailabilityOverrideTable(schemaName, tableName, alias string) *ResourceAvailabilityOverrideTable {
	return &ResourceAvailabilityOverrideTable{
		resourceAvailabilityOverrideTable: newResourceAvailabilityOverrideTableImpl(schemaName, tableName, alias),
		EXCLUDED:                          newResourceAvailabilityOverrideTableImpl("", "excluded", ""),
	}
}

func newResourceAvailabilityOverrideTableImpl(schemaName, tableName, alias string) resourceAvailabilityOverrideTable {
	var (
		ResourceIDColumn     = sqlite.StringColumn("resource_id")
		AvailabilityIDColumn = sqlite.StringColumn("availability_id")
		NameColumn           = sqlite.StringColumn("name")
		StartAtColumn        = sqlite.TimestampColumn("start_at")
		EndAtColumn          = sqlite.TimestampColumn("end_at")
		CreatedAtColumn      = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn      = sqlite.TimestampColumn("updated_at")
		allColumns           = sqlite.ColumnList{ResourceIDColumn, AvailabilityIDColumn, NameColumn, StartAtColumn, EndAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = sqlite.ColumnList{ResourceIDColumn, AvailabilityIDColumn, NameColumn, StartAtColumn, EndAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return resourceAvailabilityOverrideTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ResourceID:     ResourceIDColumn,
		AvailabilityID: AvailabilityIDColumn,
		Name:           NameColumn,
		StartAt:        StartAtColumn,
		EndAt:          EndAtColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
