//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Location = newLocationTable("", "location", "")

type locationTable struct {
	sqlite.Table

	// Columns
	ID                    sqlite.ColumnString
	Name                  sqlite.ColumnString
	DefaultAvailabilityID sqlite.ColumnString
	Tz                    sqlite.ColumnString
	CreatedAt             sqlite.ColumnTimestamp
	UpdatedAt             sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type LocationTable struct {
	locationTable

	EXCLUDED locationTable
}

// AS creates new LocationTable with assigned alias
func (a LocationTable) AS(alias string) *LocationTable {
	return newLocationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationTable with assigned schema name
func (a LocationTable) FromSchema(schemaName string) *LocationTable {
	return newLocationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LocationTable with assigned table prefix
func (a LocationTable) WithPrefix(prefix string) *LocationTable {
	return newLocationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LocationTable with assigned table suffix
func (a LocationTable) WithSuffix(suffix string) *LocationTable {
	return newLocationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLocationTable(schemaName, tableName, alias string) *LocationTable {
	return &LocationTable{
		locationTable: newLocationTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newLocationTableImpl("", "excluded", ""),
	}
}

func newLocationTableImpl(schemaName, tableName, alias string) locationTable {
	var (
		IDColumn                    = sqlite.StringColumn("id")
		NameColumn                  = sqlite.StringColumn("name")
		DefaultAvailabilityIDColumn = sqlite.StringColumn("default_availability_id")
		TzColumn                    = sqlite.StringColumn("tz")
		CreatedAtColumn             = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn             = sqlite.TimestampColumn("updated_at")
		allColumns                  = sqlite.ColumnList{IDColumn, NameColumn, DefaultAvailabilityIDColumn, TzColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns              = sqlite.ColumnList{NameColumn, DefaultAvailabilityIDColumn, TzColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return locationTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		Name:                  NameColumn,
		DefaultAvailabilityID: DefaultAvailabilityIDColumn,
		Tz:                    TzColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
