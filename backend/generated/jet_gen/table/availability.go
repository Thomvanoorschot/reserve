//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Availability = newAvailabilityTable("", "availability", "")

type availabilityTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnString
	PartOne   sqlite.ColumnInteger
	PartTwo   sqlite.ColumnInteger
	PartThree sqlite.ColumnInteger
	PartFour  sqlite.ColumnInteger
	PartFive  sqlite.ColumnInteger
	PartSix   sqlite.ColumnInteger
	CreatedAt sqlite.ColumnTimestamp
	UpdatedAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AvailabilityTable struct {
	availabilityTable

	EXCLUDED availabilityTable
}

// AS creates new AvailabilityTable with assigned alias
func (a AvailabilityTable) AS(alias string) *AvailabilityTable {
	return newAvailabilityTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AvailabilityTable with assigned schema name
func (a AvailabilityTable) FromSchema(schemaName string) *AvailabilityTable {
	return newAvailabilityTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AvailabilityTable with assigned table prefix
func (a AvailabilityTable) WithPrefix(prefix string) *AvailabilityTable {
	return newAvailabilityTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AvailabilityTable with assigned table suffix
func (a AvailabilityTable) WithSuffix(suffix string) *AvailabilityTable {
	return newAvailabilityTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAvailabilityTable(schemaName, tableName, alias string) *AvailabilityTable {
	return &AvailabilityTable{
		availabilityTable: newAvailabilityTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAvailabilityTableImpl("", "excluded", ""),
	}
}

func newAvailabilityTableImpl(schemaName, tableName, alias string) availabilityTable {
	var (
		IDColumn        = sqlite.StringColumn("id")
		PartOneColumn   = sqlite.IntegerColumn("part_one")
		PartTwoColumn   = sqlite.IntegerColumn("part_two")
		PartThreeColumn = sqlite.IntegerColumn("part_three")
		PartFourColumn  = sqlite.IntegerColumn("part_four")
		PartFiveColumn  = sqlite.IntegerColumn("part_five")
		PartSixColumn   = sqlite.IntegerColumn("part_six")
		CreatedAtColumn = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn = sqlite.TimestampColumn("updated_at")
		allColumns      = sqlite.ColumnList{IDColumn, PartOneColumn, PartTwoColumn, PartThreeColumn, PartFourColumn, PartFiveColumn, PartSixColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = sqlite.ColumnList{PartOneColumn, PartTwoColumn, PartThreeColumn, PartFourColumn, PartFiveColumn, PartSixColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return availabilityTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		PartOne:   PartOneColumn,
		PartTwo:   PartTwoColumn,
		PartThree: PartThreeColumn,
		PartFour:  PartFourColumn,
		PartFive:  PartFiveColumn,
		PartSix:   PartSixColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
