//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var LocationAvailabilityOverride = newLocationAvailabilityOverrideTable("", "location_availability_override", "")

type locationAvailabilityOverrideTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnString
	LocationID sqlite.ColumnString
	Name       sqlite.ColumnString
	StartAt    sqlite.ColumnTimestamp
	EndAt      sqlite.ColumnTimestamp
	CreatedAt  sqlite.ColumnTimestamp
	UpdatedAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type LocationAvailabilityOverrideTable struct {
	locationAvailabilityOverrideTable

	EXCLUDED locationAvailabilityOverrideTable
}

// AS creates new LocationAvailabilityOverrideTable with assigned alias
func (a LocationAvailabilityOverrideTable) AS(alias string) *LocationAvailabilityOverrideTable {
	return newLocationAvailabilityOverrideTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationAvailabilityOverrideTable with assigned schema name
func (a LocationAvailabilityOverrideTable) FromSchema(schemaName string) *LocationAvailabilityOverrideTable {
	return newLocationAvailabilityOverrideTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LocationAvailabilityOverrideTable with assigned table prefix
func (a LocationAvailabilityOverrideTable) WithPrefix(prefix string) *LocationAvailabilityOverrideTable {
	return newLocationAvailabilityOverrideTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LocationAvailabilityOverrideTable with assigned table suffix
func (a LocationAvailabilityOverrideTable) WithSuffix(suffix string) *LocationAvailabilityOverrideTable {
	return newLocationAvailabilityOverrideTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLocationAvailabilityOverrideTable(schemaName, tableName, alias string) *LocationAvailabilityOverrideTable {
	return &LocationAvailabilityOverrideTable{
		locationAvailabilityOverrideTable: newLocationAvailabilityOverrideTableImpl(schemaName, tableName, alias),
		EXCLUDED:                          newLocationAvailabilityOverrideTableImpl("", "excluded", ""),
	}
}

func newLocationAvailabilityOverrideTableImpl(schemaName, tableName, alias string) locationAvailabilityOverrideTable {
	var (
		IDColumn         = sqlite.StringColumn("id")
		LocationIDColumn = sqlite.StringColumn("location_id")
		NameColumn       = sqlite.StringColumn("name")
		StartAtColumn    = sqlite.TimestampColumn("start_at")
		EndAtColumn      = sqlite.TimestampColumn("end_at")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn  = sqlite.TimestampColumn("updated_at")
		allColumns       = sqlite.ColumnList{IDColumn, LocationIDColumn, NameColumn, StartAtColumn, EndAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = sqlite.ColumnList{LocationIDColumn, NameColumn, StartAtColumn, EndAtColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return locationAvailabilityOverrideTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		LocationID: LocationIDColumn,
		Name:       NameColumn,
		StartAt:    StartAtColumn,
		EndAt:      EndAtColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
