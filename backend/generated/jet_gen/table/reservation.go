//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Reservation = newReservationTable("", "reservation", "")

type reservationTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnString
	UserID        sqlite.ColumnString
	StartAt       sqlite.ColumnTimestamp
	EndAt         sqlite.ColumnTimestamp
	ResourceID    sqlite.ColumnString
	ReservedUntil sqlite.ColumnTimestamp
	CreatedAt     sqlite.ColumnTimestamp
	UpdatedAt     sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ReservationTable struct {
	reservationTable

	EXCLUDED reservationTable
}

// AS creates new ReservationTable with assigned alias
func (a ReservationTable) AS(alias string) *ReservationTable {
	return newReservationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReservationTable with assigned schema name
func (a ReservationTable) FromSchema(schemaName string) *ReservationTable {
	return newReservationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReservationTable with assigned table prefix
func (a ReservationTable) WithPrefix(prefix string) *ReservationTable {
	return newReservationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReservationTable with assigned table suffix
func (a ReservationTable) WithSuffix(suffix string) *ReservationTable {
	return newReservationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReservationTable(schemaName, tableName, alias string) *ReservationTable {
	return &ReservationTable{
		reservationTable: newReservationTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newReservationTableImpl("", "excluded", ""),
	}
}

func newReservationTableImpl(schemaName, tableName, alias string) reservationTable {
	var (
		IDColumn            = sqlite.StringColumn("id")
		UserIDColumn        = sqlite.StringColumn("user_id")
		StartAtColumn       = sqlite.TimestampColumn("start_at")
		EndAtColumn         = sqlite.TimestampColumn("end_at")
		ResourceIDColumn    = sqlite.StringColumn("resource_id")
		ReservedUntilColumn = sqlite.TimestampColumn("reserved_until")
		CreatedAtColumn     = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn     = sqlite.TimestampColumn("updated_at")
		allColumns          = sqlite.ColumnList{IDColumn, UserIDColumn, StartAtColumn, EndAtColumn, ResourceIDColumn, ReservedUntilColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = sqlite.ColumnList{UserIDColumn, StartAtColumn, EndAtColumn, ResourceIDColumn, ReservedUntilColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return reservationTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		UserID:        UserIDColumn,
		StartAt:       StartAtColumn,
		EndAt:         EndAtColumn,
		ResourceID:    ResourceIDColumn,
		ReservedUntil: ReservedUntilColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
