//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Resource = newResourceTable("", "resource", "")

type resourceTable struct {
	sqlite.Table

	// Columns
	ID                             sqlite.ColumnString
	Name                           sqlite.ColumnString
	LocationID                     sqlite.ColumnString
	MinimumSegments                sqlite.ColumnInteger
	MaximumSegments                sqlite.ColumnInteger
	AllowInvalidSegments           sqlite.ColumnBool
	DefaultMondayAvailabilityID    sqlite.ColumnString
	DefaultTuesdayAvailabilityID   sqlite.ColumnString
	DefaultWednesdayAvailabilityID sqlite.ColumnString
	DefaultThursdayAvailabilityID  sqlite.ColumnString
	DefaultFridayAvailabilityID    sqlite.ColumnString
	DefaultSaturdayAvailabilityID  sqlite.ColumnString
	DefaultSundayAvailabilityID    sqlite.ColumnString
	CreatedAt                      sqlite.ColumnTimestamp
	UpdatedAt                      sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ResourceTable struct {
	resourceTable

	EXCLUDED resourceTable
}

// AS creates new ResourceTable with assigned alias
func (a ResourceTable) AS(alias string) *ResourceTable {
	return newResourceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ResourceTable with assigned schema name
func (a ResourceTable) FromSchema(schemaName string) *ResourceTable {
	return newResourceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ResourceTable with assigned table prefix
func (a ResourceTable) WithPrefix(prefix string) *ResourceTable {
	return newResourceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ResourceTable with assigned table suffix
func (a ResourceTable) WithSuffix(suffix string) *ResourceTable {
	return newResourceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newResourceTable(schemaName, tableName, alias string) *ResourceTable {
	return &ResourceTable{
		resourceTable: newResourceTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newResourceTableImpl("", "excluded", ""),
	}
}

func newResourceTableImpl(schemaName, tableName, alias string) resourceTable {
	var (
		IDColumn                             = sqlite.StringColumn("id")
		NameColumn                           = sqlite.StringColumn("name")
		LocationIDColumn                     = sqlite.StringColumn("location_id")
		MinimumSegmentsColumn                = sqlite.IntegerColumn("minimum_segments")
		MaximumSegmentsColumn                = sqlite.IntegerColumn("maximum_segments")
		AllowInvalidSegmentsColumn           = sqlite.BoolColumn("allow_invalid_segments")
		DefaultMondayAvailabilityIDColumn    = sqlite.StringColumn("default_monday_availability_id")
		DefaultTuesdayAvailabilityIDColumn   = sqlite.StringColumn("default_tuesday_availability_id")
		DefaultWednesdayAvailabilityIDColumn = sqlite.StringColumn("default_wednesday_availability_id")
		DefaultThursdayAvailabilityIDColumn  = sqlite.StringColumn("default_thursday_availability_id")
		DefaultFridayAvailabilityIDColumn    = sqlite.StringColumn("default_friday_availability_id")
		DefaultSaturdayAvailabilityIDColumn  = sqlite.StringColumn("default_saturday_availability_id")
		DefaultSundayAvailabilityIDColumn    = sqlite.StringColumn("default_sunday_availability_id")
		CreatedAtColumn                      = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn                      = sqlite.TimestampColumn("updated_at")
		allColumns                           = sqlite.ColumnList{IDColumn, NameColumn, LocationIDColumn, MinimumSegmentsColumn, MaximumSegmentsColumn, AllowInvalidSegmentsColumn, DefaultMondayAvailabilityIDColumn, DefaultTuesdayAvailabilityIDColumn, DefaultWednesdayAvailabilityIDColumn, DefaultThursdayAvailabilityIDColumn, DefaultFridayAvailabilityIDColumn, DefaultSaturdayAvailabilityIDColumn, DefaultSundayAvailabilityIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                       = sqlite.ColumnList{NameColumn, LocationIDColumn, MinimumSegmentsColumn, MaximumSegmentsColumn, AllowInvalidSegmentsColumn, DefaultMondayAvailabilityIDColumn, DefaultTuesdayAvailabilityIDColumn, DefaultWednesdayAvailabilityIDColumn, DefaultThursdayAvailabilityIDColumn, DefaultFridayAvailabilityIDColumn, DefaultSaturdayAvailabilityIDColumn, DefaultSundayAvailabilityIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return resourceTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                             IDColumn,
		Name:                           NameColumn,
		LocationID:                     LocationIDColumn,
		MinimumSegments:                MinimumSegmentsColumn,
		MaximumSegments:                MaximumSegmentsColumn,
		AllowInvalidSegments:           AllowInvalidSegmentsColumn,
		DefaultMondayAvailabilityID:    DefaultMondayAvailabilityIDColumn,
		DefaultTuesdayAvailabilityID:   DefaultTuesdayAvailabilityIDColumn,
		DefaultWednesdayAvailabilityID: DefaultWednesdayAvailabilityIDColumn,
		DefaultThursdayAvailabilityID:  DefaultThursdayAvailabilityIDColumn,
		DefaultFridayAvailabilityID:    DefaultFridayAvailabilityIDColumn,
		DefaultSaturdayAvailabilityID:  DefaultSaturdayAvailabilityIDColumn,
		DefaultSundayAvailabilityID:    DefaultSundayAvailabilityIDColumn,
		CreatedAt:                      CreatedAtColumn,
		UpdatedAt:                      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
